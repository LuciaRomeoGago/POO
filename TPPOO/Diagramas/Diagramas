/*
class Cliente {
    - nombre: string
    - dni: int
    - id: string
    - referenciaAnimal: Mascota[]
    - inventario: mixed[]

    + __construct(nombre: string, dni: int, id: string = null)
    + getNombre(): string
    + getDni(): int
    + getId(): string
    + getReferenciaAnimal(): Mascota[]
    + getInventario(): mixed[]
    + setNombre(nombre: string): void
    + setDni(dni: int): Cliente
    + setId(id: string): void
    + setMascotas(mascotas: Mascota[]): void
    + setInventario(inventario: mixed[]): void
    + agregarMascota(mascota: Mascota): void
    + mostrarMascotas(): void
    + mostrar(): void
}

class ClienteManager extends ArrayIdManager {
    + __construct()
    + levantar(): void
    + alta(): void
    + baja(): void
    + mostrar(): void
    + modificar(elementoModificado = null): void
}

class ClienteModelo {
    + guardar(cliente: Cliente): bool
    + obtenerTodos(): array
    + buscarPorId(id: string): Cliente|null
    + existeDni(dni: int): bool
    + modificar(cliente: Cliente, campos: array): bool
    + borrar(cliente: Cliente): bool
}

class Inventario {
    + agregarProducto(clienteId: int, productoId: int, cantidad: int): bool
    + eliminarProducto(clienteId: int, productoId: int): bool
    + obtenerInventario(clienteId: int): array
}

class InventarioManager {
    + agregarAlInventario(cliente: Cliente, productoId: int, cantidad: int): bool
    + eliminarDelInventario(cliente: Cliente, productoId: int): bool
    + mostrarInventario(cliente: Cliente): void
    + comprarProducto(cliente: Cliente, productoManager: ProductoManager): void
}

class Mascota {
    - nombre: string
    - edad: int
    - raza: string
    - id: string|null
    - historialMedico: string
    - clienteId: int|null

    + __construct(nombre: string, edad: int, raza: string, historialMedico: string)
    + getNombre(): string
    + getEdad(): int
    + getRaza(): string
    + getId(): string|null
    + getHistorialMedico(): string
    + getClienteId(): int|null
    + setNombre(nombre: string): void
    + setEdad(edad: int): void
    + setRaza(raza: string): void
    + setId(id: string): void
    + setHistorialMedico(historialMedico: string): void
    + setClienteId(clienteId: int): void
    + mostrar(): void
}

class MascotaManager extends ArrayIdManager {
    - cliente: Cliente

    + __construct(cliente: Cliente)
    + setCliente(cliente: Cliente): void
    + levantar(): void
    + alta(): bool
    + baja(): void
    + mostrar(): void
    + modificar(esVeterinario: bool = false): void
}

class MascotaModelo {
    + guardar(mascota: Mascota): bool
    + modificar(mascota: Mascota): bool
    + borrar(mascota: Mascota): bool
    + getMascotasPorClienteId(id: int): array
    + actualizarMascota(mascota: Mascota): void
}

class Producto {
    - id: int
    - nombre: string
    - precio: float
    - stock: int

    + __construct(id: int, nombre: string, precio: float, stock: int)
    + getId(): int
    + getNombre(): string
    + getPrecio(): float
    + getStock(): int
    + setId(id: int): void
    + setNombre(nombre: string): void
    + setPrecio(precio: float): void
    + setStock(stock: int): void
    + mostrar(): void
}

class ProductoManager extends ArrayIdManager {
    + __construct()
    + levantar(): void
    + mostrar(): void
    + alta(): bool
    + baja(): void
    + modificar(elementoModificado = null): void
}

class ProductoModelo {
    + guardar(producto: Producto): bool
    + obtenerTodos(): array
    + borrar(producto: Producto): bool
    + modificar(producto: Producto): bool
    + buscarPorId(id: int): Producto|null
    + hayStockDisponible(producto: Producto, cantidadCompra: int): bool
    + restarStock(producto: Producto, cantidadCompra: int): bool
}

class Veterinario {
    - nombre: string
    - especialidad: string
    - id: int|null

    + __construct(nombre: string, especialidad: string, id: int = null)
    + getNombre(): string
    + getEspecialidad(): string
    + getId(): int|null
    + setNombre(nombre: string): void
    + setEspecialidad(especialidad: string): void
    + setId(id: int): void
    + mostrar(): void
}

class VeterinarioManager extends ArrayIdManager {
    + __construct()
    + levantar(): void
    + alta(): bool
    + baja(): void
    + modificar(elementoModificado): void
    + mostrar(): void
    + altaMascota(): void
    + mostrarMascota(): void
}

class VeterinarioModelo {
    + guardar(veterinario: Veterinario): bool
    + obtenerTodos(): array
    + borrar(veterinario: Veterinario): bool
    + modificar(veterinario: Veterinario, campos: array): bool
    + buscarPorId(veterinarioId: int): Veterinario|null
}

class Conexion {
    - static db: PDO|null

    - __construct()
    + static getConexion(): PDO
    + static query(sql: string): array
    + static ejecutar(sql: string): bool
    + static prepare(sql: string): PDOStatement
    + static getLastId(): string
    + static closeConexion(): void
}

abstract class ArrayIdManager {
    # arreglo: array

    + getArreglo(): array
    + agregar(elemento: object): void
    + existeId(id: int|string): bool
    + eliminarPorId(id: int|string): void
    + getPorId(id: int|string): object|null
    + modificar(elementoModificado: object): void
    + abstract mostrar(): void
}

interface ABMinterface {
    +{abstract} levantar(): void
    +{abstract} alta(): void
    +{abstract} baja(): void
    +{abstract} modificacion(): void
}

class Menu {
    # salir: bool
    - static lineasPorPagina: int

    + __construct()
    + static writeln(texto: string): void
    + static readln(texto: string): string
    + static lineasPorPagina(): int
    + static waitForEnter(): void
    + static cls(): void
    + pantallaBienvenida(nombreSistema: string): void
    + pantallaDespedida(): void
    + static subtitulo(subtitulo: string): void
    # exit(): void
    + getSalir(): bool
    # menu(titulo: string, opciones: array): void
    + iniciarSistema(): void
}

class MenuAdmin {
    +menuPrincipal(): void
    +subMenuClientes(clienteManager: ClienteManager): void
    +subMenuVeterinarios(veterinarioManager: VeterinarioManager): void
}
 */