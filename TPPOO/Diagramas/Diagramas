/*
class Cliente {
    - nombre: string
    - dni: int
    - id: string
    - referenciaAnimal: Mascota[]
    - inventario: mixed[]

    + __construct(nombre: string, dni: int, id: string = null)
    + getNombre(): string
    + getDni(): int
    + getId(): string
    + getReferenciaAnimal(): Mascota[]
    + getInventario(): mixed[]
    + setNombre(nombre: string): void
    + setDni(dni: int): Cliente
    + setId(id: string): void
    + setMascotas(mascotas: Mascota[]): void
    + setInventario(inventario: mixed[]): void
    + agregarMascota(mascota: Mascota): void
    + mostrarMascotas(): void
    + mostrar(): void
}

class ClienteManager extends ArrayIdManager implements ABMinterface{
    + __construct()
    + levantar(): void
    + alta(): void
    + baja(): void
    + mostrar(): void
    + modificar(elementoModificado = null): void
}

class ClienteModelo {
    + guardar(cliente: Cliente): bool
    + obtenerTodos(): array
    + buscarPorId(id: string): Cliente|null
    + existeDni(dni: int): bool
    + modificar(cliente: Cliente, campos: array): bool
    + borrar(cliente: Cliente): bool
}

class Inventario {
    - producto: Producto
    - cantidad: int

    + __construct(Producto producto, cantidad)
    + getProducto(): Producto
    + getCantidad(): int
    + getId(): int
    + setCantidad(cantidad): void
}

class InventarioModelo {
    = static guardar(clienteId, productoId, cantidad): bool
    = static borrar(clienteId, productoId): bool
    = static modificar(clienteId, productoId, nuevaCantidad)
    = static obtenerInventario(clienteId): array
    = static getPorClienteId(clienteId): array
}

class InventarioManager extends ArrayIdManager implements ABMinterface{
    - cliente: Cliente

    + __construct(Cliente cliente)
    + levantar(): void
    + alta (): bool
    + baja(): bool
    + mostrar(): void
    = static mostrarInventario(Cliente cliente): void
    = static comprarProducto(Cliente cliente, ProductoManager productoManager): void
}


class Mascota {
    - nombre: string
    - edad: int
    - raza: string
    - id: string|null
    - historialMedico: string
    - clienteId: int|null

    + __construct(nombre: string, edad: int, raza: string, historialMedico: string)
    + getNombre(): string
    + getEdad(): int
    + getRaza(): string
    + getId(): string|null
    + getHistorialMedico(): string
    + getClienteId(): int|null
    + setNombre(nombre: string): void
    + setEdad(edad: int): void
    + setRaza(raza: string): void
    + setId(id: string): void
    + setHistorialMedico(historialMedico: string): void
    + setClienteId(clienteId: int): void
    + mostrar(): void
}

class MascotaManager extends ArrayIdManager implements ABMinterface{
    - cliente: Cliente

    + __construct(cliente: Cliente)
    + setCliente(cliente: Cliente): void
    + levantar(): void
    + alta(): bool
    + baja(): void
    + mostrar(): void
    + modificar(esVeterinario: bool = false): void
}

class MascotaModelo {
    + guardar(mascota: Mascota): bool
    + modificar(mascota: Mascota): bool
    + borrar(mascota: Mascota): bool
    + getPorClienteId(clienteId): array
    + actualizarMascota(mascota: Mascota): void
}

class Producto {
    - id: int
    - nombre: string
    - precio: int
    - stock: int

    + __construct(id: int, nombre: string, precio: int, stock: int)
    + getId(): int
    + getNombre(): string
    + getPrecio(): int
    + getStock(): int
    + setId(id: int): void
    + setNombre(nombre: string): void
    + setPrecio(precio: int): void
    + setStock(stock: int): void
    + mostrar(): void
}

class ProductoManager extends ArrayIdManager implements ABMinterface{
    + __construct()
    + levantar(): void
    + mostrar(): void
    + alta(): bool
    + baja(): void
    + modificar(elementoModificado = null): void
    + comprar (idProducto, cantidadCompra): bool
}

class ProductoModelo {
    + guardar(producto: Producto): bool
    = static obtenerTodos(): array
    + borrar(producto: Producto): bool
    + modificar(producto: Producto): bool
    = static buscarPorId(id: int): Producto|null
    + existeId(id:int): bool
    + hayStockDisponible(producto: Producto, cantidadCompra: int): bool
    + restarStock(producto: Producto, cantidadCompra: int): bool
}

class Veterinario {
    - nombre: string
    - especialidad: string
    - id: int|null

    + __construct(nombre: string, especialidad: string, id: int = null)
    + getNombre(): string
    + getEspecialidad(): string
    + getId(): int|null
    + setNombre(nombre: string): void
    + setEspecialidad(especialidad: string): void
    + setId(id: int): void
    + mostrar(): void
}

class VeterinarioManager extends ArrayIdManager implements ABMinterface {
    + __construct()
    + levantar(): void
    + alta(): bool
    + baja(): void
    + modificar(elementoModificado): void
    + mostrar(): void
    + altaMascota(): void
    + mostrarMascota(): void
}

class VeterinarioModelo {
    + guardar(veterinario: Veterinario): bool
    = static obtenerTodos(): array
    + borrar(veterinario: Veterinario): bool
    + modificar(veterinario: Veterinario, campos: array): bool
    = static buscarPorId(veterinarioId: int): Veterinario|null
}

class Conexion {
    = static db: PDO|null

    - __construct()
    = static getConexion(): PDO
    = static query(sql: string): array
    = static ejecutar(sql: string): bool
    = static prepare(sql: string): PDOStatement
    = static getLastId(): string
    = static closeConexion(): void
}

abstract class ArrayIdManager {
    # arreglo: array

    + getArreglo(): array
    + agregar(elemento: object): void
    + existeId(id: int|string): bool
    + eliminarPorId(id: int|string): void
    + getPorId(id: int|string): object|null
    + modificar(elementoModificado: object): void
    * abstract mostrar(): void
}

interface ABMinterface {
    *{abstract} levantar(): void
    *{abstract} alta(): void
    *{abstract} baja(): void
    *{abstract} modificacion(): void
}

class Menu {
    # salir: bool
    = static lineasPorPagina: int

    + __construct()
    = static writeln(texto: string): void
    = static readln(texto: string): string
    = static lineasPorPagina(): int
    = static waitForEnter(): void
    = static cls(): void
    + pantallaBienvenida(nombreSistema: string): void
    + pantallaDespedida(): void
    = static subtitulo(subtitulo: string): void
    # exit(): void
    + getSalir(): bool
    # menu(titulo: string, opciones: array): void
    + iniciarSistema(): void
}

  class MenuAdmin {
   -clienteManager: ClienteManager
   -veterinarioManager: VeterinarioManager
   -productoManager: ProductoManager
   -clienteId: null 
   -veterinarioId:null 

    + __construct()
    + menuPrincipal(): void
    + menuCliente(): void
    + menuGestionMascotas (MascotaManager mascotaManager) : void
    + menuCompraProductos (): void
    + menuVeterinario(): void
    + menuAdministrarClientes(): void
    + menuAdministrarMascotas(): void
    + menuAdministrarProductos(): void
    # salirSistema(): void
}
 */